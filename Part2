
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    // Class representing a Recipe
    class Recipe
    /* Use getters and setters the instance
    is the recipe and is a public access modifer
    so they can be accessed from outside the class
    the setter would be the NumOfIngreidents and the getter
    would be the Ingreidents 
    */
    {
        public string RecipeName { get; set; } // get,set to enter name of the recipe
        public int NumOfIngredients { get; set; } //get,set for NumOfIngreidents 
        public List<Ingredient> Ingredients { get; set; }// List the number of Ingreidents
        public int NumOfSteps { get; set; } // List the steps in integers 
        public List<string> Steps { get; set; }

        public Recipe(string name)
        {
            RecipeName = name;
            Ingredients = new List<Ingredient>();
            Steps = new List<string>();
        }

        public void Print()
        {
            Console.WriteLine($"Recipe: {RecipeName}");//output to ask the name of the recipe
            Console.WriteLine("Ingredients:");
            for (int i = 0; i < NumOfIngredients; i++)
            {
                Console.WriteLine($"{Ingredients[i].Name}: {Ingredients[i].Quantity} {Ingredients[i].Unit} ({Ingredients[i].FoodGroup})");
            }
            Console.WriteLine("Steps:");
            for (int i = 0; i < NumOfSteps; i++)
            {
                Console.WriteLine($"{i + 1}. {Steps[i]}");
            }
        }
        // calculates the calrories of the recipe
        public double CalculateTotalCalories()
        {
            double totalCalories = 0;
            foreach (var ingredient in Ingredients)
            {
                totalCalories += ingredient.Calories;
            }
            return totalCalories;
        }

        public delegate void RecipeCalorieNotification(); // using delagate feature for calorie notifcation

        public RecipeCalorieNotification NotifyCalorieExceedance;


        public void ExplainCalorieRange()
        {
            double totalCalories = CalculateTotalCalories();
            Console.WriteLine($"Total Calories: {totalCalories}");

            if (totalCalories < 100)
            {
                Console.ForegroundColor = ConsoleColor.Green; // shows a green colour when its low in calroies
                Console.WriteLine("This recipe is low in calories.");
                Console.ResetColor();
            }
            else if (totalCalories >= 100 && totalCalories <= 300) // will show that the calories are moderate amount in calroies
            {
                Console.ForegroundColor = ConsoleColor.Yellow; // shows a yellow colour when its moderate in calroies
                Console.WriteLine("This recipe has a moderate amount of calories.");
                Console.ResetColor();
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;  // shows a red colour when the user has 
                Console.WriteLine("This recipe is high in calories.");
                Console.ResetColor();

                NotifyCalorieExceedance?.Invoke();
            }
        }
    }
    // Class showing the ingreidents
    class Ingredient
    {
        public string Name { get; set; } // get, set to get the recipe name
        public double Quantity { get; set; } // get, set to get the quanity
        public string Unit { get; set; } // get, set to get unit of measurment
        public double Calories { get; set; } // get, set to get the calories
        public string FoodGroup { get; set; } // get,set to add the food group its in
    }
    // Display available food group options
    private static readonly List<string> AvailableFoodGroups = new List<string> { "Starchy foods", "Vegetables and fruits", "Dry beans, peas, lentils and soya", "Chicken, fish, meat and eggs", "Milk and dairy products", "Fats and Oils", "Water" };


    public static void DisplayFoodGroupOptions()
    {
        Console.WriteLine("Available Food Groups:");
        for (int i = 0; i < AvailableFoodGroups.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {AvailableFoodGroups[i]}");
        }
    }

    static void Main(string[] args)
    {
        List<Recipe> recipes = new List<Recipe>();
        /* 
       Used to store the recipe which grows
       dynamically and can store unlimited recipes 
       */


        while (true)
        {
            Console.WriteLine("Sanele's Recipe Book");
            Console.WriteLine();
            Console.WriteLine("Pick the command you would like to use:");
            Console.WriteLine("1. Add Recipe");
            Console.WriteLine("2. View Recipes");
            Console.WriteLine("3. Exit");
            Console.Write("Enter your choice: ");

            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    // allows the user to enter the name of the recipe
                    Console.WriteLine("Enter the name of the recipe:");
                    string recipeName = Console.ReadLine();
                    Recipe newRecipe = new Recipe(recipeName);

                    // shows the number of ingreidents
                    Console.WriteLine("Enter the number of ingredients you would like to add:");

                    //use exception when a user enters an invalid input like a non-numeric value
                    if (!int.TryParse(Console.ReadLine(), out int numOfIngredients))
                    {
                        Console.WriteLine("Invalid input. Please enter a valid number.");
                        break;
                    }
                    newRecipe.NumOfIngredients = numOfIngredients;

                    for (int i = 0; i < newRecipe.NumOfIngredients; i++)
                    {
                        Console.WriteLine($"Please enter the name of ingredient {i + 1}:");
                        string name = Console.ReadLine();

                        Console.WriteLine($"Please enter the quantity of ingredient {i + 1}:");

                        //use exception when a user enters an invalid input like a non-numeric value
                        if (!double.TryParse(Console.ReadLine(), out double quantity))
                        {
                            Console.WriteLine("Invalid input. Please enter a valid number.");
                            break;
                        }

                        Console.WriteLine($"Please enter the unit of measurment for the ingredient {i + 1}:");
                        string unit = Console.ReadLine();

                        Console.WriteLine($"Please enter the number of calories for ingredient {i + 1}:");
                        //use exception when a user enters an invalid input like a non-numeric value
                        if (!double.TryParse(Console.ReadLine(), out double calories))
                        {
                            Console.WriteLine("Invalid input. Please enter a valid number.");
                            break;
                        }


                        Console.WriteLine($"Please select the food group for ingredient {i + 1}:");
                        DisplayFoodGroupOptions();

                        //use exception when a user enters an invalid input like a non-numeric value
                        if (!int.TryParse(Console.ReadLine(), out int foodGroupIndex) || foodGroupIndex < 1 || foodGroupIndex > AvailableFoodGroups.Count)
                        {
                            Console.WriteLine("Invalid input. Please enter a valid number.");
                            break;
                        }

                        string foodGroup = AvailableFoodGroups[foodGroupIndex];

                        newRecipe.Ingredients.Add(new Ingredient { Name = name, Quantity = quantity, Unit = unit, Calories = calories, FoodGroup = foodGroup });
                    }

                    Console.WriteLine("Please enter the number of steps:");

                    //use exception when a user enters an invalid input like a non-numeric value
                    if (!int.TryParse(Console.ReadLine(), out int numOfSteps))
                    {
                        Console.WriteLine("Invalid input. Please enter a valid number.");
                        break;
                    }
                    newRecipe.NumOfSteps = numOfSteps;

                    for (int i = 0; i < newRecipe.NumOfSteps; i++)
                    {
                        Console.WriteLine($"Please enter step {i + 1}:");
                        string step = Console.ReadLine();
                        newRecipe.Steps.Add(step);
                    }

                    recipes.Add(newRecipe);
                    break;

                // display no recipes found if recipe is not there
                case "2":
                    if (recipes.Count == 0)
                    {
                        Console.WriteLine("No recipes found.");
                    }
                    else
                    {
                        recipes = recipes.OrderBy(r => r.RecipeName).ToList();
                        //OrderBy method stores the recipes in Alphabetical

                        Console.WriteLine("Recipes:");
                        for (int i = 0; i < recipes.Count; i++)
                        {
                            Console.WriteLine($"{i + 1}. {recipes[i].RecipeName}");
                        }

                        Console.WriteLine("Enter the number of the recipe you want to view:");

                        //use exception when a user enters an invalid input like a non-numeric value
                        if (!int.TryParse(Console.ReadLine(), out int recipeIndex) || recipeIndex < 1 || recipeIndex > recipes.Count)
                        {
                            Console.WriteLine("Invalid recipe number.");
                            break;
                        }
                        Recipe selectedRecipe = recipes[recipeIndex - 1];
                        selectedRecipe.Print();
                        selectedRecipe.ExplainCalorieRange();
                    }
                    break;

                case "3":
                    return;

                default:
                    Console.WriteLine("Invalid choice. Please enter a valid choice.");
                    break;
            }

            Console.WriteLine();
        }
    }



    static void RunUnitTest()
    {
        Recipe recipe = new Recipe("Scrambled eggs");
        recipe.NumOfIngredients = 3;
        recipe.Ingredients = new List<Ingredient>
        {
            new Ingredient { Name = "egg", Quantity = 2, Unit = "grams", Calories = 150, FoodGroup = "Chicken, fish, meat and eggs" },
            new Ingredient { Name = "butter", Quantity = 1, Unit = "tablespoon", Calories = 102, FoodGroup = "Milk and dairy products" },
            new Ingredient { Name = "Parsley", Quantity = 1, Unit = "teaspoon", Calories = 1, FoodGroup = "Vegetables and fruits" }
        };
        recipe.NumOfSteps = 3;
        recipe.Steps = new List<string> { "Start by chopping the parsley really finely. Then beat the eggs in a bowl with salt and pepper.", "Heat a pan on the stove and melt the butter in it.scramble the eggs and keep stirring till they are done and cooked to your liking.", "Remove from the pan into a plate and finish with the fresh parsley" };
        // Expected output:
        // Recipe: Scrambled eggs
        // Ingredients:
        // Egg: 150 grams (Chicken, fish, meat and eggs)
        // Butter: 102 tablespoon (Chicken, fish, meat and eggs)
        // Parsley: 1 teaspoon (Vegetables and fruits)
        // Steps:
        // 1. Start by chopping the parsley really finely. Then beat the eggs in a bowl with salt and pepper
        // 2. Heat a pan on the stove and melt the butter in it.scramble the eggs and keep stirring till they are done and cooked to your liking
        // 3. Remove from the pan into a plate and finish with the fresh parsley

        Console.WriteLine("Test 1:");
        recipe.Print();

        // Test 2: Calculate total calories of the recipe
        // Expected output: Total Calories: 154
        Console.WriteLine("Test 2:");
        double totalCalories = recipe.CalculateTotalCalories();
        Console.WriteLine($"Total Calories: {totalCalories}");

        // Test 3: Explain calorie range of the recipe
        // Expected output: This recipe is moderate in calories.
        Console.WriteLine("Test 3:");
        recipe.ExplainCalorieRange();

        // Test 4: Add a recipe with no ingredients or steps
        Recipe emptyRecipe = new Recipe("Empty Recipe");
        emptyRecipe.NumOfIngredients = 0;
        emptyRecipe.NumOfSteps = 0;

        // Expected output:
        // Recipe: Empty Recipe
        // Ingredients:
        // Steps:
        Console.WriteLine("Test 4:");
        emptyRecipe.Print();

        // Test 5: Calculate total calories of the empty recipe
        // Expected output: Total Calories: 0
        Console.WriteLine("Test 5:");
        totalCalories = emptyRecipe.CalculateTotalCalories();
        Console.WriteLine($"Total Calories: {totalCalories}");

        // Test 6: Explain calorie range of the empty recipe
        // Expected output: This recipe is low in calories.
        Console.WriteLine("Test 6:");
        emptyRecipe.ExplainCalorieRange();
    }
}

